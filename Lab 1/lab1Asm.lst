


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Lab1Asm, CODE, READONLY
    2 00000000         
    3 00000000                 EXPORT           encryptionAsm
    4 00000000                 EXPORT           decryptionAsm
    5 00000000         ; Lab 1, Assembly encryption/decryption routines
    6 00000000         ; REGISTERS
    7 00000000         ; R0: Pointer to key -> D0
    8 00000000         ; R1: Pointer to data -> D1
    9 00000000         ; R2: Delta
   10 00000000         ; R3: Sum
   11 00000000         ; R4: Loop counter (N)
   12 00000000         ; R5: Pointer to Data
   13 00000000         ; R6-R8: T0-T3
   14 00000000         ; R9-R12: K0-K3
   15 00000000         
   16 00000000         encryptionAsm
   17 00000000         
   18 00000000 B401            PUSH             {R0}        ; Put key pointer o
                                                            n stack
   19 00000002 B402            PUSH             {R1}        ; Put data pointer 
                                                            on stack
   20 00000004 B404            PUSH             {R2}        ; Put delta on stac
                                                            k
   21 00000006 B408            PUSH             {R3}        ; Put sum on stack
   22 00000008 B410            PUSH             {R4}        ;
   23 0000000A B420            PUSH             {R5}        ;
   24 0000000C B440            PUSH             {R6}        ;
   25 0000000E B480            PUSH             {R7}
   26 00000010 F84D 8D04       PUSH             {R8}
   27 00000014 F84D 9D04       PUSH             {R9}
   28 00000018 F84D AD04       PUSH             {R10}
   29 0000001C F84D BD04       PUSH             {R11}
   30 00000020 F84D CD04       PUSH             {R12}
   31 00000024         
   32 00000024         ; Copy data pointer to temp register
   33 00000024 460D            MOV              R5, R1
   34 00000026         
   35 00000026         ; Load key into registers 9 - 12
   36 00000026 E890 1E00       LDM              R0, {R9 - R12}
   37 0000002A         
   38 0000002A         ; Load data into R0 and R1
   39 0000002A E895 0003       LDM              R5, {R0 - R1}
   40 0000002E         
   41 0000002E         ; Set loop counter and sum to 0
   42 0000002E F04F 0300       MOV              R3, #0
   43 00000032 F04F 0400       MOV              R4, #0
   44 00000036         
   45 00000036         ; BEGIN LOOP
   46 00000036         EncryptionLoop
   47 00000036 2C20            CMP              R4, #32     ; Compare loop coun
                                                            ter and 32
   48 00000038 D01D            BEQ              EndEncryptionLoop ; if equal, l
                                                            oop is done, exit
   49 0000003A         
   50 0000003A         ; Sum += Delta
   51 0000003A 4413            ADD              R3, R3, R2
   52 0000003C         
   53 0000003C         ; T1 = D1 << 4 + K0
   54 0000003C EA4F 1601       LSL              R6, R1, #4



ARM Macro Assembler    Page 2 


   55 00000040 444E            ADD              R6, R6, R9
   56 00000042         
   57 00000042         ; T2 = D1 >> 5 + K1
   58 00000042 EA4F 1751       LSR              R7, R1, #5
   59 00000046 4457            ADD              R7, R7, R10
   60 00000048         
   61 00000048         ; T3 = D1 + Sum
   62 00000048 EB01 0803       ADD              R8, R1, R3
   63 0000004C         
   64 0000004C         ; T4 = T1 XOR T1 XOR T3
   65 0000004C EA86 0607       EOR              R6, R6, R7
   66 00000050 EA86 0608       EOR              R6, R6, R8
   67 00000054         
   68 00000054         ; D0 = D0 + T4
   69 00000054 4430            ADD              R0, R0, R6
   70 00000056         
   71 00000056         ; T1 = D0 << 4 + K2
   72 00000056 EA4F 1600       LSL              R6, R0, #4
   73 0000005A 445E            ADD              R6, R6, R11
   74 0000005C         
   75 0000005C         ; T2 = D0 >> 5 + K3
   76 0000005C EA4F 1750       LSR              R7, R0, #5
   77 00000060 4467            ADD              R7, R7, R12
   78 00000062         
   79 00000062         ; T3 = D0 + Sum
   80 00000062 EB00 0803       ADD              R8, R0, R3
   81 00000066         
   82 00000066         ; T4 = T1 XOR T2 XOR T3
   83 00000066 EA86 0607       EOR              R6, R6, R7
   84 0000006A EA86 0608       EOR              R6, R6, R8
   85 0000006E         
   86 0000006E         ; D1 = D1 + T4
   87 0000006E 4431            ADD              R1, R1, R6
   88 00000070         
   89 00000070 F104 0401       ADD              R4, R4, #1  ; increment counter
                                                            
   90 00000074 E7DF            B                EncryptionLoop
   91 00000076         EndEncryptionLoop
   92 00000076         
   93 00000076         ; AFTER LOOP
   94 00000076 C503            STM              R5!, {R0 - R1} ; Put data back 
                                                            in memory
   95 00000078         
   96 00000078 F85D CB04       POP              {R12}
   97 0000007C F85D BB04       POP              {R11}
   98 00000080 F85D AB04       POP              {R10}
   99 00000084 F85D 9B04       POP              {R9}
  100 00000088 F85D 8B04       POP              {R8}
  101 0000008C BC80            POP              {R7}
  102 0000008E BC40            POP              {R6}
  103 00000090 BC20            POP              {R5}
  104 00000092 BC10            POP              {R4}
  105 00000094 BC08            POP              {R3}
  106 00000096 BC04            POP              {R2}
  107 00000098 BC02            POP              {R1}
  108 0000009A BC01            POP              {R0}
  109 0000009C         ; Increment stack pointer by 3 registers
  110 0000009C         
  111 0000009C 4770            BX               LR



ARM Macro Assembler    Page 3 


  112 0000009E         
  113 0000009E                 ENDP
  114 0000009E         
  115 0000009E         decryptionAsm
  116 0000009E B401            PUSH             {R0}        ; Put key pointer o
                                                            n stack
  117 000000A0 B402            PUSH             {R1}        ; Put data pointer 
                                                            on stack
  118 000000A2 B404            PUSH             {R2}        ; Put delta on stac
                                                            k
  119 000000A4 B408            PUSH             {R3}        ; Put sum on stack
  120 000000A6 B410            PUSH             {R4}        ;
  121 000000A8 B420            PUSH             {R5}        ;
  122 000000AA B440            PUSH             {R6}        ;
  123 000000AC B480            PUSH             {R7}
  124 000000AE F84D 8D04       PUSH             {R8}
  125 000000B2 F84D 9D04       PUSH             {R9}
  126 000000B6 F84D AD04       PUSH             {R10}
  127 000000BA F84D BD04       PUSH             {R11}
  128 000000BE F84D CD04       PUSH             {R12}
  129 000000C2         
  130 000000C2         ; Copy data pointer to temp register
  131 000000C2 460D            MOV              R5, R1
  132 000000C4         
  133 000000C4         ; Load key into registers 9 - 12
  134 000000C4 E890 1E00       LDM              R0, {R9 - R12}
  135 000000C8         
  136 000000C8         ; Load data into R0 and R1
  137 000000C8 E895 0003       LDM              R5, {R0 - R1}
  138 000000CC         
  139 000000CC         ; Set loop counter to 0
  140 000000CC F04F 0400       MOV              R4, #0
  141 000000D0         
  142 000000D0         ; BEGIN LOOP
  143 000000D0         DecryptionLoop
  144 000000D0 2C20            CMP              R4, #32     ; Compare loop coun
                                                            ter and 32
  145 000000D2 D020            BEQ              EndDecryptionLoop ; if equal, l
                                                            oop is done, exit
  146 000000D4         
  147 000000D4         ; T1 = D0 << 4 + K2
  148 000000D4 EA4F 1600       LSL              R6, R0, #4
  149 000000D8 445E            ADD              R6, R6, R11
  150 000000DA         
  151 000000DA         ; T2 = D0 >> 5 + K3
  152 000000DA EA4F 1750       LSR              R7, R0, #5
  153 000000DE 4467            ADD              R7, R7, R12
  154 000000E0         
  155 000000E0         ; T3 = D0 + Sum
  156 000000E0 EB00 0803       ADD              R8, R0, R3
  157 000000E4         
  158 000000E4         ; T4 = T1 XOR T1 XOR T3
  159 000000E4 EA86 0607       EOR              R6, R6, R7
  160 000000E8 EA86 0608       EOR              R6, R6, R8
  161 000000EC         
  162 000000EC         ; D1 = D1 + T4
  163 000000EC EBA1 0106       SUB              R1, R1, R6
  164 000000F0         
  165 000000F0         ; T1 = D1 << 4 + K0



ARM Macro Assembler    Page 4 


  166 000000F0 EA4F 1601       LSL              R6, R1, #4
  167 000000F4 444E            ADD              R6, R6, R9
  168 000000F6         
  169 000000F6         ; T2 = D1 >> 5 + K1
  170 000000F6 EA4F 1751       LSR              R7, R1, #5
  171 000000FA 4457            ADD              R7, R7, R10
  172 000000FC         
  173 000000FC         ; T3 = D1 + Sum
  174 000000FC EB01 0803       ADD              R8, R1, R3
  175 00000100         
  176 00000100         ; T4 = T1 XOR T1 XOR T3
  177 00000100 EA86 0607       EOR              R6, R6, R7
  178 00000104 EA86 0608       EOR              R6, R6, R8
  179 00000108         
  180 00000108         ; D0 = D0 - T4
  181 00000108 EBA0 0006       SUB              R0, R0, R6
  182 0000010C         
  183 0000010C         ; increment counter
  184 0000010C F104 0401       ADD              R4, R4, #1
  185 00000110         
  186 00000110         ; Sum -= Delta
  187 00000110 EBA3 0302       SUB              R3, R3, R2
  188 00000114         
  189 00000114 E7DC            B                DecryptionLoop
  190 00000116         EndDecryptionLoop
  191 00000116         
  192 00000116         ; AFTER LOOP
  193 00000116 C503            STM              R5!, {R0 - R1} ; Put data back 
                                                            in memory
  194 00000118         
  195 00000118 F85D CB04       POP              {R12}
  196 0000011C F85D BB04       POP              {R11}
  197 00000120 F85D AB04       POP              {R10}
  198 00000124 F85D 9B04       POP              {R9}
  199 00000128 F85D 8B04       POP              {R8}
  200 0000012C BC80            POP              {R7}
  201 0000012E BC40            POP              {R6}
  202 00000130 BC20            POP              {R5}
  203 00000132 BC10            POP              {R4}
  204 00000134 BC08            POP              {R3}
  205 00000136 BC04            POP              {R2}
  206 00000138 BC02            POP              {R1}
  207 0000013A BC01            POP              {R0}
  208 0000013C         
  209 0000013C         ; Increment stack pointer by 3 registers
  210 0000013C         
  211 0000013C 4770            BX               LR
  212 0000013E         
  213 0000013E                 ENDP
  214 0000013E         
  215 0000013E                 END
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=lab1Asm.
d -olab1Asm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\ST\STM32F4xx --list=lab1Asm.lst lab1Asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DecryptionLoop 000000D0

Symbol: DecryptionLoop
   Definitions
      At line 143 in file lab1Asm.s
   Uses
      At line 189 in file lab1Asm.s
Comment: DecryptionLoop used once
EncryptionLoop 00000036

Symbol: EncryptionLoop
   Definitions
      At line 46 in file lab1Asm.s
   Uses
      At line 90 in file lab1Asm.s
Comment: EncryptionLoop used once
EndDecryptionLoop 00000116

Symbol: EndDecryptionLoop
   Definitions
      At line 190 in file lab1Asm.s
   Uses
      At line 145 in file lab1Asm.s
Comment: EndDecryptionLoop used once
EndEncryptionLoop 00000076

Symbol: EndEncryptionLoop
   Definitions
      At line 91 in file lab1Asm.s
   Uses
      At line 48 in file lab1Asm.s
Comment: EndEncryptionLoop used once
Lab1Asm 00000000

Symbol: Lab1Asm
   Definitions
      At line 1 in file lab1Asm.s
   Uses
      None
Comment: Lab1Asm unused
decryptionAsm 0000009E

Symbol: decryptionAsm
   Definitions
      At line 115 in file lab1Asm.s
   Uses
      At line 4 in file lab1Asm.s
Comment: decryptionAsm used once
encryptionAsm 00000000

Symbol: encryptionAsm
   Definitions
      At line 16 in file lab1Asm.s
   Uses
      At line 3 in file lab1Asm.s
Comment: encryptionAsm used once
7 symbols
337 symbols in table
